From: Abhilash Raj <raj.abhilash1@gmail.com>
Date: Fri, 14 Dec 2018 17:16:42 -0800
Subject: Address commands shouldn't create Results email.

If the email is sent to one of the -join, -leave, -confirm addresses, there
is usually always a confirmation/welcome message generated. Don't send the
'Results of your email command' email in that case.

Origin: upstream, https://gitlab.com/mailman/mailman/commit/a186c8ffd572767a98a7c104b8966ff277261e2a
Bug: https://gitlab.com/mailman/mailman/issues/516
---
 src/mailman/runners/command.py            |  9 +++++++-
 src/mailman/runners/docs/command.rst      | 38 +++----------------------------
 src/mailman/runners/tests/test_confirm.py | 27 ++++------------------
 src/mailman/runners/tests/test_join.py    | 31 +++++--------------------
 src/mailman/runners/tests/test_leave.py   | 23 ++++---------------
 5 files changed, 27 insertions(+), 101 deletions(-)

diff --git a/src/mailman/runners/command.py b/src/mailman/runners/command.py
index e885b21..2212e33 100644
--- a/src/mailman/runners/command.py
+++ b/src/mailman/runners/command.py
@@ -52,6 +52,7 @@ class CommandFinder:
         self.command_lines = []
         self.ignored_lines = []
         self.processed_lines = []
+        self.send_response = True
         # Depending on where the message was destined to, add some implicit
         # commands.  For example, if this was sent to the -join or -leave
         # addresses, it's the same as if 'join' or 'leave' commands were sent
@@ -60,15 +61,18 @@ class CommandFinder:
         subaddress = msgdata.get('subaddress')
         if subaddress == 'join':
             self.command_lines.append('join')
+            self.send_response = False
             is_address_command = True
         elif subaddress == 'leave':
             self.command_lines.append('leave')
             is_address_command = True
+            self.send_response = False
         elif subaddress == 'confirm':
             mo = re.match(config.mta.verp_confirm_regexp, msg.get('to', ''))
             if mo:
                 self.command_lines.append('confirm ' + mo.group('cookie'))
                 is_address_command = True
+                self.send_response = False
         # Stop processing if the address already contained a valid command
         if is_address_command:
             return
@@ -205,7 +209,10 @@ class CommandRunner(Runner):
                     'Invalid status: %s' % status)
                 if status == ContinueProcessing.no:
                     break
-        # All done.  Strip blank lines and send the response.
+        # All done. If we don't need to send response, return.
+        if not finder.send_response:
+            return
+        # Strip blank lines and send the response.
         lines = [line.strip() for line in finder.command_lines if line]
         if len(lines) > 0:
             print(_('\n- Unprocessed:'), file=results)
diff --git a/src/mailman/runners/docs/command.rst b/src/mailman/runners/docs/command.rst
index 0dbce2e..07e36b6 100644
--- a/src/mailman/runners/docs/command.rst
+++ b/src/mailman/runners/docs/command.rst
@@ -138,7 +138,7 @@ address, and the other is the results of his email command.
     >>> command.run()
     >>> messages = get_queue_messages('virgin', sort_on='subject')
     >>> len(messages)
-    2
+    1
 
     >>> from mailman.interfaces.subscriptions import ISubscriptionManager
 
@@ -150,7 +150,6 @@ address, and the other is the results of his email command.
     ...         token = str(subject).split()[1].strip()
     ...         new_token, token_owner, member = manager.confirm(token)
     ...         assert new_token is None, 'Confirmation failed'
-    Subject: The results of your email commands
     Subject: confirm ...
 
 .. Clear the queue
@@ -173,7 +172,7 @@ Similarly, to leave a mailing list, the user need only email the ``-leave`` or
     >>> command.run()
     >>> messages = get_queue_messages('virgin')
     >>> len(messages)
-    2
+    1
 
     >>> print(messages[0].msg.as_string())
     MIME-Version: 1.0
@@ -183,17 +182,6 @@ Similarly, to leave a mailing list, the user need only email the ``-leave`` or
     To: dperson@example.com
     ...
 
-    >>> print(messages[1].msg.as_string())
-    Subject: The results of your email commands
-    From: test-bounces@example.com
-    To: dperson@example.com
-    ...
-    <BLANKLINE>
-    - Results:
-    Dirk Person <dperson@example.com> left test@example.com
-    <BLANKLINE>
-    - Done.
-    <BLANKLINE>
 
 The ``-confirm`` address is also available as an implicit command.
 ::
@@ -209,27 +197,7 @@ The ``-confirm`` address is also available as an implicit command.
     >>> command.run()
     >>> messages = get_queue_messages('virgin')
     >>> len(messages)
-    1
-
-    >>> print(messages[0].msg.as_string())
-    Subject: The results of your email commands
-    From: test-bounces@example.com
-    To: dperson@example.com
-    ...
-    <BLANKLINE>
-    The results of your email command are provided below.
-    <BLANKLINE>
-    - Original message details:
-    From: dperson@example.com
-    Subject: n/a
-    Date: ...
-    Message-ID: ...
-    <BLANKLINE>
-    - Results:
-    Confirmation token did not match
-    <BLANKLINE>
-    - Done.
-    <BLANKLINE>
+    0
 
 
 Stopping command processing
diff --git a/src/mailman/runners/tests/test_confirm.py b/src/mailman/runners/tests/test_confirm.py
index 9aa540d..30e7222 100644
--- a/src/mailman/runners/tests/test_confirm.py
+++ b/src/mailman/runners/tests/test_confirm.py
@@ -20,7 +20,6 @@
 import unittest
 
 from datetime import datetime
-from email.iterators import body_line_iterator
 from mailman.app.lifecycle import create_list
 from mailman.config import config
 from mailman.database.transaction import transaction
@@ -205,22 +204,7 @@ From: Anne Person <anne@example.org>
         user = manager.get_user('anne@example.org')
         self.assertEqual(list(user.addresses)[0].email, 'anne@example.org')
         # Make sure that the confirmation was not attempted twice.
-        items = get_queue_messages('virgin', expected_count=1)
-        # Search the contents of the results message.  There should be just
-        # one 'Confirmation email' line.
-        confirmation_lines = []
-        in_results = False
-        for line in body_line_iterator(items[0].msg):
-            line = line.strip()
-            if in_results:
-                if line.startswith('- Done'):
-                    break
-                if len(line) > 0:
-                    confirmation_lines.append(line)
-            if line.strip() == '- Results:':
-                in_results = True
-        self.assertEqual(len(confirmation_lines), 1)
-        self.assertNotIn('did not match', confirmation_lines[0])
+        get_queue_messages('virgin', expected_count=0)
 
     def test_welcome_message_after_confirmation(self):
         # Confirmations with a welcome message set.
@@ -246,8 +230,8 @@ From: Anne Person <anne@example.org>
         # Now there's a email command notification and a welcome message.  All
         # we care about for this test is the welcome message.
         items = get_queue_messages('virgin', sort_on='subject',
-                                   expected_count=2)
-        self.assertEqual(str(items[1].msg['subject']),
+                                   expected_count=1)
+        self.assertEqual(str(items[0].msg['subject']),
                          'Welcome to the "Test" mailing list')
 
     def test_confirm_subcommand_with_more_commands(self):
@@ -267,9 +251,8 @@ Content-Transfer-Encoding: quoted-printable
         self._commandq.enqueue(msg, dict(listid='test.example.com',
                                          subaddress='confirm'))
         self._runner.run()
-        # This should send out one email that confirms that token was accepted.
-        items = get_queue_messages('virgin', expected_count=1)
-        self.assertNotIn('No such command: bad-command', str(items[0].msg))
+        # This should not send out any email.
+        get_queue_messages('virgin', expected_count=0)
 
     def test_confirm_in_subject_with_more_commands(self):
         get_queue_messages('virgin')
diff --git a/src/mailman/runners/tests/test_join.py b/src/mailman/runners/tests/test_join.py
index efb01e1..a20077e 100644
--- a/src/mailman/runners/tests/test_join.py
+++ b/src/mailman/runners/tests/test_join.py
@@ -48,7 +48,7 @@ class TestJoin(unittest.TestCase):
     def test_double_confirmation(self):
         # A join request comes in using both the -join address and the word
         # 'subscribe' in the first line of the body.  This should produce just
-        # one subscription request and one confirmation response.
+        # one subscription request.
         msg = mfs("""\
 From: anne@example.org
 To: test-join@example.com
@@ -61,31 +61,12 @@ subscribe
         self._commandq.enqueue(msg, dict(listid='test.example.com',
                                          subaddress='join'))
         self._runner.run()
-        # There will be two messages in the queue.  The first one is a reply
-        # to Anne notifying her of the status of her command email.  The
-        # second one is the confirmation message of her join request.
+        # There will be one messages in the queue. This is the confirmation
+        # message of her join request.
         items = get_queue_messages('virgin', sort_on='subject',
-                                   expected_count=2)
-        self.assertTrue(str(items[1].msg['subject']).startswith('confirm'))
-        self.assertEqual(items[0].msg['subject'],
-                         'The results of your email commands')
-        # Search the contents of the results message.  There should be just
-        # one 'Confirmation email' line.
-        confirmation_lines = []
-        in_results = False
-        for line in body_line_iterator(items[0].msg):
-            line = line.strip()
-            if in_results:
-                if line.startswith('- Done'):
-                    break
-                if len(line) > 0:
-                    confirmation_lines.append(line)
-            if line.strip() == '- Results:':
-                in_results = True
-        # There should be exactly one confirmation line.
-        self.assertEqual(len(confirmation_lines), 1)
-        # And the confirmation line should name Anne's email address.
-        self.assertIn('anne@example.org', confirmation_lines[0])
+                                   expected_count=1)
+
+        self.assertTrue(str(items[0].msg['subject']).startswith('confirm'))
 
     def test_join_when_already_a_member(self):
         anne = getUtility(IUserManager).create_user('anne@example.org')
diff --git a/src/mailman/runners/tests/test_leave.py b/src/mailman/runners/tests/test_leave.py
index 00bd24e..d39987b 100644
--- a/src/mailman/runners/tests/test_leave.py
+++ b/src/mailman/runners/tests/test_leave.py
@@ -78,21 +78,11 @@ leave
         self._commandq.enqueue(msg, dict(listid='test.example.com',
                                          subaddress='leave'))
         self._runner.run()
-        # Two messages have been sent, both to anne@example.org.  The first
-        # asks for her confirmation of her unsubscription event.  The second
-        # is the results of her email command.
-        items = get_queue_messages('virgin', sort_on='subject',
-                                   expected_count=2)
-        if items[0].msg['from'] == 'test-bounces@example.com':
-            results = items[0].msg
-            confirmation = items[1].msg
-        else:
-            results = items[1].msg
-            confirmation = items[0].msg
+        # One message with confirmation of her unsubscription event should be
+        # sent.
+        items = get_queue_messages('virgin', expected_count=1)
+        confirmation = items[0].msg
         self.assertTrue(str(confirmation['subject']).startswith('confirm'))
-        line = confirmation_line(results)
-        # The confirmation line should name Anne's email address.
-        self.assertIn('anne@example.org', line)
 
     def test_double_leave(self):
         # In this case, the user can be unsubscribed immediately because the
@@ -113,7 +103,4 @@ leave
         self._commandq.enqueue(msg, dict(listid='test.example.com',
                                          subaddress='leave'))
         self._runner.run()
-        items = get_queue_messages('virgin', sort_on='subject',
-                                   expected_count=1)
-        line = confirmation_line(items[0].msg)
-        self.assertEqual(line, 'anne@example.org left test@example.com')
+        get_queue_messages('virgin', sort_on='subject', expected_count=0)
